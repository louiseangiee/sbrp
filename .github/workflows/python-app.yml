name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install beautifulsoup4
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Set up environment variables
      env:
        SECRET_KEY: Our_secret_key
        DATABASE_URL: mysql+mysqlconnector://g4t4:password@spm-g4t4-live.cybxkypjkirc.ap-southeast-2.rds.amazonaws.com:3306/sbrp_new
        TEST_DATABASE_URL: mysql+mysqlconnector://g4t4:password@spm-g4t4-live.cybxkypjkirc.ap-southeast-2.rds.amazonaws.com:3306/sbrp_test
      run: |
        echo "SECRET_KEY=$SECRET_KEY" >> .env
        echo "DATABASE_URL=$DATABASE_URL" >> .env
        echo "TEST_DATABASE_URL=$TEST_DATABASE_URL" >> .env
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run unit tests
      run: |
        python flask_webapp/tests/unit/test_unit_create_role.py
        python flask_webapp/tests/unit/test_unit_edit_listing.py
        python flask_webapp/tests/unit/test_unit_apply_role.py
        python flask_webapp/tests/unit/test_unit_view_roleskill_match.py
        python flask_webapp/tests/unit/test_unit_view_listings_HR.py
        python flask_webapp/tests/unit/test_unit_view_open_listings.py
        
           
        

    - name: Run integration tests
      run: |
        python flask_webapp/tests/integration/test_integration_apply_role.py
        python flask_webapp/tests/integration/test_integration_role_skill_match.py
        python flask_webapp/tests/integration/test_integration_edit_listing.py
        python flask_webapp/tests/integration/test_integration_view_open_listings.py
        python flask_webapp/tests/integration/test_integration_view_listings_HR.py
        
      
